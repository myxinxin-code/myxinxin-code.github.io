{"meta":{"title":"Welcome my blog !!!","subtitle":"","description":"多学多看多动手","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-10-28T03:14:38.000Z","updated":"2021-10-28T03:14:38.660Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-10-28T03:14:46.000Z","updated":"2021-10-28T03:14:46.912Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"redis_learning","slug":"redis-learning","date":"2021-10-27T01:21:27.000Z","updated":"2021-10-28T01:51:22.758Z","comments":true,"path":"2021/10/27/redis-learning/","link":"","permalink":"http://example.com/2021/10/27/redis-learning/","excerpt":"","text":"Redis 入门指南 特性 1. 数据类型 字符串类型 散列类型 列表类型 集合类型 有序集合类型 2. 内存存储与持久化 Redis数据库中的所有数据都存储在内存中。由于内存的读写速度远快于硬盘，因此Redis在性能上对比其他基于硬盘存储的数据库有非常明显的优势，在一台普通的笔记本电脑上，Redis可以在一秒内读写超过十万个键值。 Redis提供了对持久化的支持，即将可以内存中的数据异步写入到硬盘中，同时不影响继续提供服务。 3. 功能丰富 Redis虽然是作为数据库开发的，但由于其提供了丰富的功能，越来越多的人将其用作缓存、队列系统等。 Redis可以为每个键设置生存时间（Time To Live，TTL），生存时间到期后键会自动被删除。这一功能配合出色的性能让Redis可以作为缓存系统来使用。 作为缓存系统，Redis还可以限定数据占用的最大内存空间，在数据达到空间限制后可以按照一定的规则自动淘汰不需要的键。 除此之外，Redis的列表类型键可以用来实现队列，并且支持阻塞式读取，可以很容易地实现一个高性能的优先级队列。同时在更高层面上，Redis还支持“发布/订阅”的消息模式。 安装 指令： 1234wget http://download.redis.io/redis-stable.tar.gztar xzf redis-stable.tar.gzcd redis-stablemake 可执行文件： 启动 直接启动—-开发环境 1redis-server Redis服务器默认会使用6379端口[插图]，通过–port参数可以自定义端口号。 通过初始化脚本启动Redis在Redis源代码目录的utils文件夹中有一个名为redis_init_script的初始化脚本文件。answer 停止Redis 考虑到Redis有可能正在将内存中的数据同步到硬盘中，强行终止Redis进程可能会导致数据丢失。正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，方法为： 1redis-cli SHUTDOWN 当Redis收到SHUTDOWN命令后，会先断开所有客户端连接，然后根据配置执行持久化，最后完成退出。Redis可以妥善处理SIGTERM信号，所以使用“kill Redis进程的PID”也可以正常结束Redis，效果与发送SHUTDOWN命令一样。 redis命令行客户端 通过redis-cli向Redis发送命令 发送命令 通过redis-cli向Redis发送命令有两种方式，第一种方式是将命令作为redis-cli的参数执行：redis-cli SHUTDOWN。redis-cli执行时会自动按照默认配置（服务器地址为127.0.0.1，端口号为6379）连接Redis，通过-h和-p参数可以自定义地址和端口号： 1redis-cli -h 127.0.0.1 -p 6379 Redis提供了PING命令来测试客户端与Redis的连接是否正常，如果连接正常会收到回复PONG。 第二种方式是不附带参数运行redis-cli，这样会进入交互模式，可以自由输入命令。 命令返回值 命令的返回值有5种类型，对于每种类型redis-cli的展现结果都不同。 状态回复 错误回复 整数回复 字符串回复 多行字符串回复KEYS:KEYS命令的作用是获取数据库中符合指定规则的键名 string 类型 字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。你可以用其存储用户的邮箱、JSON化的对象甚至是一张图片。一个字符串类型键允许存储的数据的最大容量是512 MB。 命令 赋值与取值 12SET key valueGET key 递增数字 1INCR key 在关系数据库中我们通过设置字段属性为AUTO_INCREMENT来实现每增加一条记录自动为其生成一个唯一的递增ID的目的，而在Redis中可以通过另一种模式来实现：对于每一类对象使用名为对象类型(复数形式):count[插图]的键（如users:count）来存储当前类型对象的数量，每增加一个新对象时都使用INCR命令递增该键的值。由于使用INCR命令建立的键的初始键值是1，所以可以很容易得知，INCR命令的返回值既是加入该对象后的当前类型的对象总数，又是该新增对象的ID。 增加指定的整数 1INCRBY key increment 减少指定的整数 12DECR keyDECRBY key decrement 增加指定浮点数 1INCRBYFLOAT key increment INCRBYFLOAT命令类似INCRBY命令，差别是前者可以递增一个双精度浮点数。 向尾部追加值 1APPEND key value APPEND作用是向键值的末尾追加value。如果键不存在则将该键的值设置为value，即相当于SET key value。返回值是追加后字符串的总长度。 获取字符串长度 1STRLEN key STRLEN命令返回键值的长度，如果键不存在则返回0。前面提到了字符串类型可以存储二进制数据，所以它可以存储任何编码的字符串。 同时获得/设置多个键值 12MGET key1 key2...MSET key1 v1 key2 v2... 位操作 1234GETBIT key offsetSETBIT key offset valueBITCOUNT key [start] [end]BITOP operation destkey key [key....] BITCOUNT命令可以获得字符串类型键中值是1的二进制位个数。BITOP命令可以对多个字符串类型键进行位运算，并将结果存储在destkey参数指定的键中。BITOP命令支持的运算操作有AND、OR、XOR和NOT。 散列类型 散列类型（hash）的键值也是一种字典结构，其存储了字段（field）和字段值的映射，但字段值只能是字符串，不支持其他数据类型，换句话说，散列类型不能嵌套其他的数据类型。一个散列类型键可以包含至多232-1个字段。 除了散列类型，Redis的其他数据类型同样不支持数据类型嵌套。比如集合类型的每个元素都只能是字符串，不能是另一个集合或散列表等。 命令 赋值与取值 12345HSET key field valueHGET key fieldHMSET key field value [field value ...]HMGET key field [field...]HGETALL key HSET命令的方便之处在于不区分插入和更新操作，这意味着修改数据时不用事先判断字段是否存在来决定要执行的是插入操作（update）还是更新操作（insert）。当执行的是插入操作时（即之前字段不存在）HSET命令会返回1，当执行的是更新操作时（即之前字段已经存在）HSET命令会返回0。更进一步，当键本身不存在时，HSET命令还会自动建立它。 判断字段是否存在 1HEXISTS key field HEXISTS命令用来判断一个字段是否存在。如果存在则返回1，否则返回0（如果键不存在也会返回0）。 当字段不存在时赋值 1HSETNX key field value HSETNX命令与HSET命令类似，区别在于如果字段已经存在，HSETNX命令将不执行任何操作。 增加数字 1HINCRBY key field increment 散列类型没有HINCR命令，但是可以通过HINCRBY key field 1来实现。 删除字段 1HDEL key field [field,....] HDEL命令可以删除一个或多个字段，返回值是被删除的字段个数。 只获取字段名或字段值 12HKEYS keyKVALS key 有时仅仅需要获取键中所有字段的名字而不需要字段值，那么可以使用HKEYS。 获得字段数量 1HLEN key","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-10-26T13:26:15.422Z","updated":"1985-10-26T08:15:00.000Z","comments":true,"path":"2021/10/26/hello-world/","link":"","permalink":"http://example.com/2021/10/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]}